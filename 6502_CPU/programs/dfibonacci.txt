define MON $8000
define MONPTR $ff
define fib_a $fa
define fib_b $fb
define fib_c $fc

define INL $02
define INH $03
define OUTL $0
define OUTH $1

LDY #0
LDX #0
STX MONPTR

LDA #$00
STA fib_a
STA fib_c
LDA #$01
STA fib_b
CLC
loop:
BCS end

STA INL       ; Print fib_b + ' '
LDA #0        ;
STA INH       ;
JSR print_bcd ;
LDA #$0A      ;
STA $8000, X  ;
INX           ;
STX MONPTR    ;

LDA fib_a
STA fib_c
LDA fib_b
STA fib_a
CLC
ADC fib_c
STA fib_b
JMP loop
end:
BRK

print_bcd:
	jsr bcd
	ldx MONPTR
	bcs print_bcd_loop ; carry is set, so an even number of digits
	
	lda $10,Y
	adc #$30
	sta $8000, X
	inx
	dey
	
print_bcd_loop:
	cpy #0
	bmi print_bcd_exit
	lda $10,Y
	lsr A
	lsr A
	lsr A
	lsr A
	clc
	adc #$30
	sta $8000, X
	inx
	lda $10,Y
	and #$f
	clc
	adc #$30
	sta $8000, X
	inx
	dey
	jmp print_bcd_loop
print_bcd_exit:
	stx MONPTR
	rts

; Arguments: INL and INH (unsigned short)
; Modifies : RAM[10]-RAM[10+Y] = bcd in little-endian format,
;            RAM[INL,INH,OUTL,OUTH],
;            A=0, X=nOfDigits, Y=(X-1)/2=nOfBytesUsed-1
;            P with N=0 and C=(even number of digits ? 1 : 0)
bcd:
	lda #0
	sta OUTL
	sta OUTH

	ldx #0

bcd_main_loop:
	clc
	php

	ldy #0
bcd_loop:
	cpy #16
	beq bcd_exit_loop
	plp
	
	rol INL
	rol INH
	rol OUTL
	rol OUTH
	
	lda OUTL
	sec
	sbc #10
	php

	bcc bcd_skip_storing
	sta OUTL
bcd_skip_storing:
	
	iny
	jmp bcd_loop
bcd_exit_loop:
	plp
	
	rol INL
	rol INH
	
	txa
	lsr A ; divides the index for where we put the digit by 2. Carry flag is set if it must be stored in the high nibble
	tay
	lda OUTL
	php
	bcc bcd_skip_store_Hnibble
	asl A
	asl A
	asl A
	asl A
	ora $10,Y
bcd_skip_store_Hnibble:
	sta $10,Y
	inx
	
	lda INH
	ora INL
	beq bcd_exit
	plp

	lda #0
	sta OUTH
	sta OUTL
	jmp bcd_main_loop

bcd_exit:
	plp
	rts
	
